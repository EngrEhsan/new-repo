name: Build & store PLSW reference image and sdk

on:
  workflow_call:
    inputs:
      ref:
        required: true
        default: 'main'
        type: string
        description: 'branch / tag or commit id to build'
      target:
        required: true
        default: 'neext-reference'
        type: string
        description: 'Yocto target to build'
      machine:
        required: true
        default: 'neext-ccu-a0'
        type: string
        description: 'machine to use in Yocto build'
      qemu-machine:
        required: true
        default: 'neext-ccu-qemu'
        type: string
        description: 'qemu machine to use in Yocto build'
      qemu-image:
        required: true
        default: true
        type: boolean
        description: 'use true if you want to build the qemu image'
      clean-build:
        required: true
        default: false
        type: boolean
        description: 'use true if you want to prevent using sstate chache and shared dl dir'
      no-internet:
        required: true
        default: false
        type: boolean
        description: 'use true if you want to prevent using DL_DIR internet mirrors and use PREMIRRORS plsw-linux-dl-mirror repo'
      build-image:
        required: true
        default: true
        type: boolean
        description: 'use true if you want to build the image'
      build-debug-image:
        required: true
        default: true
        type: boolean
        description: 'use true if you want to build the image'
      build-sdk:
        required: true
        default: false
        type: boolean
        description: 'use true if you want to include sdk'
      build_app_container:
        required: false
        default: false
        type: boolean
        description: 'Build app container'
      build-release:
        required: true
        default: false
        type: boolean
        description: 'use true if you want to build official release and upload artifacts & assets'
      run-tests:
        required: false
        default: false
        type: boolean
        description: 'Run tests on qemu'
      get-lc-info:
        required: false
        default: false
        type: boolean
        description: "Get packages' dependency list"
      upload-mender-artifact:
        required: true
        default: false
        type: boolean
        description: 'Upload release to Mender Server'
      repo:
        required: true
        default: 'plsw-linux-image-neext-reference'
        type: string
        description: 'Repo information'
      artifact-retention:
        required: true
        default: 1
        type: number
        description: 'artifact retention time in days'

    secrets:
      MACHINE_USER_NAME:
        required: true
      MACHINE_USER_ACCESS_TOKEN:
        required: true
      MACHINE_USER_SSH_KEY:
        required: true
      AZURE_CREDENTIALS:
        required: true
      REGISTRY_LOGIN_SERVER:
        required: true
      REGISTRY_USERNAME:
        required: true
      REGISTRY_PASSWORD:
        required: true
      MENDER_SIGNING_KEY_BASE64_DEV:
        required: true
      MENDER_PERSONAL_ACCESS_TOKEN:
        required: true

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build and upload
    env:
      DISTRO: neext-vaillant
      SSH_KEY: ${{ secrets.MACHINE_USER_SSH_KEY }}
      PREMIRRORS: 
      NO_INTERNET: false
      DL_DIR: 
      SSTATE_DIR: 
      SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      GIT_SSH_COMMAND: ssh -o StrictHostKeyChecking=yes -o UserKnownHostsFile=/home/builder/.ssh/known_hosts  -F /dev/null
      MENDER_SIGNING_KEY_BASE64_DEV: ${{ secrets.MENDER_SIGNING_KEY_BASE64_DEV }}
      MENDER_PERSONAL_ACCESS_TOKEN: ${{ secrets.MENDER_PERSONAL_ACCESS_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    runs-on: [yocto-builder]
    outputs:
      container_env: ${{ steps.env.outputs.container }}
      is_container_latest: ${{ steps.env.outputs.container_latest }}
    container:
      image: linuxplswbuildcontainerregistry.azurecr.io/vaillant-neext/plsw-linux-tools-yocto-build-container/plsw-linux-tools-yocto-build-container:latest
      credentials:
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
      volumes:
        - download_vol:/opt/yocto/downloads
        - sstate_vol:/opt/yocto/sstate
      options: --user builder

    steps:
      - name: Dump inputs context
        run: echo '${{ toJSON(inputs) }}'
        
      - name: Init
        run: git config --global --add safe.directory '*'

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ inputs.ref }}
          token: ${{ secrets.MACHINE_USER_ACCESS_TOKEN }}
          submodules: true
          set-safe-directory: "*"

      - name: Setup environment variables
        id: env
        run: |
          echo "Setup environment variables"
          if [ ${{ inputs.no-internet }} == true ];then
            echo "PREMIRRORS=$(pwd)/plsw-linux-dl-mirror" >> $GITHUB_ENV
            echo "NO_INTERNET=true" >> $GITHUB_ENV
          fi

          if [ ${{ inputs.clean-build }} != true ];then
            echo "DL_DIR=/opt/yocto/downloads" >> $GITHUB_ENV
            echo "SSTATE_DIR=/opt/yocto/sstate" >> $GITHUB_ENV
          fi

          if [ ${{ github.event_name == 'release' }} == true ];then 
            echo "RELEASE_TAG=$(echo ${GITHUB_REF_NAME})" >> $GITHUB_ENV
          else 
            echo "RELEASE_TAG=$(echo ${GITHUB_REF_NAME} | sed 's/\//-/g')" >> $GITHUB_ENV
          fi

          echo "container_latest=true" >> $GITHUB_OUTPUT
          echo "container=latest" >> "$GITHUB_OUTPUT"

          if [ ${{ inputs.build_app_container }} == true || ${{ contains(inputs.ref, 'sdk') }} == true ];then
            if [ ${{ contains(inputs.ref, 'feature') }} == true ];then
              REF=${{ inputs.ref }} # Note we need to get rid of the '/' in the path
              echo "container_latest=false" >> $GITHUB_OUTPUT
              echo "container=${REF//'/'/-}" >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: Setup SSH for build system
        run: |
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ env.SSH_KEY }}"
          mkdir -p /home/builder/.ssh
          touch /home/builder/.ssh/known_hosts
          ssh-keyscan github.com > /home/builder/.ssh/known_hosts 

      - name: Build and upload production image
        if: ${{ inputs.build-image == true }}
        uses: ./.github/actions/build-image
        with:
          target: ${{ inputs.target }}
          machine: ${{ inputs.machine }}
          build-release: ${{ inputs.build-release }}
          upload-mender-artifact: ${{ inputs.upload-mender-artifact }}
          artifact-retention: ${{ inputs.artifact-retention }}

      - name: Build and upload debug image
        if: ${{ inputs.build-debug-image == true }}
        uses: ./.github/actions/build-image
        with:
          target: ${{ inputs.target }}-debug
          machine: ${{ inputs.machine }}
          build-release: ${{ inputs.build-release }}
          upload-mender-artifact: ${{ inputs.upload-mender-artifact }}
          artifact-retention: ${{ inputs.artifact-retention }}

      - name: Build and upload debug SDK
        if: ${{ (inputs.build-sdk == true) || (inputs.build_app_container == true) || contains(inputs.ref, 'sdk') }}
        uses: ./.github/actions/build-sdk
        with:
          target: ${{ inputs.target }}-debug
          machine: ${{ inputs.machine }}
          build-release: ${{ inputs.build-release }}
          artifact-retention: ${{ inputs.artifact-retention }}

      - name: Build and upload qemu image
        if: ${{ inputs.qemu-image == true }}
        uses: ./.github/actions/qemu-image
        with:
          target: ${{ inputs.target }}-debug
          machine: ${{ inputs.qemu-machine }}
          build-release: ${{ inputs.build-release }}
          artifact-retention: ${{ inputs.artifact-retention }}

      - name: Check Commit Messages
        uses: Vaillant-NEEXT/plsw-linux-tools-shared-workflows/.github/actions/commit-message-check@main

      - name: Check Submodules
        uses: Vaillant-NEEXT/plsw-linux-tools-shared-workflows/.github/actions/submodule-check@main


  build-app-build-container:
    name: Application build container builder
    if: ${{ ((always() && inputs.build_app_container == true) || (always() && contains(inputs.ref, 'sdk') == true)) }}
    needs: build
    runs-on: [yocto-builder]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}
          token: ${{ secrets.MACHINE_USER_ACCESS_TOKEN }}
          submodules: false

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.target }}-debug-${{ inputs.machine }}-sdk.zip
          path: artifact

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
     
      - name: 'Build and push image'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
 
      - name: Extract metadata for Docker as latest
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            linuxplswbuildcontainerregistry.azurecr.io/vaillant-neext/${{ inputs.repo }}/${{ inputs.repo }}
          tags: |
            type=semver,pattern={{version}},enable=true
            type=semver,pattern={{major}}.{{minor}},enable=true
            type=semver,pattern={{major}},enable=true
            type=semver,pattern={{raw}}
            type=schedule,pattern=nightly,enable=true
            type=raw,value=${{ needs.build.outputs.container_env }},enable=true
            type=sha,enable=false
          flavor: |
            latest=${{ needs.build.outputs.is_container_latest }}

      - name: Build and push debug Docker image
        run: |
          #clean build cache
          docker builder prune --force

          tag_options=""
          while read tag
          do
            echo "Build and Push: $tag"
            if [ ! -z "$tag" ]
            then
              docker build . -t $tag
              docker push $tag
            fi
          done <<< $(echo "${{ steps.meta.outputs.tags }}")

  run-qemu-tests:   
    name: Run tests on Qemu
    if: ${{ ((always() && contains(needs.build-app-build-container.result, 'success')) || (always() && contains(needs.build.result, 'success') && inputs.build_app_container != true) && inputs.run-tests == true) }}
    needs: [build, build-app-build-container]
    env:
      SOURCE: . /opt/neext-vaillant/*/environment-setup-cortexa53-crypto-vaillant-linux
    runs-on: [yocto-builder]
    container:
      image: linuxplswbuildcontainerregistry.azurecr.io/vaillant-neext/${{ inputs.repo }}/${{ inputs.repo }}:${{ needs.build.outputs.container_env }}
      credentials:
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}
          token: ${{ secrets.MACHINE_USER_ACCESS_TOKEN }}
          submodules: false
          
      - name: Test debug image
        uses: ./.github/actions/qemu-tests
        with:
          target: ${{ inputs.target }}-debug
          machine: ${{ inputs.qemu-machine }}
          artifact-retention: ${{ inputs.artifact-retention }}
